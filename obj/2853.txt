#include <stdlib.h>
#include <stdio.h>
#define MAX 1000
int na, nb, nc, nd, ne, a[MAX], b[MAX], c[MAX], d[MAX*2], e[MAX];
int compare (const void * a, const void * b) {return ( *(int*)a - *(int*)b );}

void sort_distinct(int x[], int * nx) {
    int i, k;
    if (*nx == 0) return;
    qsort(x, *nx, sizeof(int), compare);
    for (i=1,k=0; i<*nx; i++){
        if (x[i] != x[i-1]) {
            x[++k] = x[i];
        }
    }
    *nx = k + 1;
}

void input() {
    int i, k;
    scanf(" %d %d", &na, &nb);
    for (i=0; i<na; i++) scanf(" %d", &a[i]);
    for (i=0; i<nb; i++) scanf(" %d", &b[i]);
}

void output(int x[], int * nx) {
    int i;
    putchar('{');
    for (i=0; i<*nx; i++) {
        printf("%d", x[i]);
        if (i+1 != *nx) putchar(',');
    }
    putchar('}');
    putchar('\n');    
}

int main() {
    int i, j, found;
    input();
    
    nc = 0;
    for (i=0; i<na; i++) {
        found = 0;
        for (j=0; j<nb; j++) {
            if (a[i] == b[j]) {
                found = 1;
                break;
            }
        }
        if (found) c[nc++] = a[i];
    }
    sort_distinct(c, &nc);
    output(c, &nc);
    
    nd = na + nb;
    memcpy(d, a, sizeof(int)*na);
    memcpy(d+na, b, sizeof(int)*nb);
    sort_distinct(d, &nd);
    output(d, &nd);
    
    ne = 0;
    for (i=0; i<na; i++) {
        found = 0;
        for (j=0; j<nb; j++) {
            if (a[i] == b[j]) {
                found = 1;
                break;
            }
        }
        if (!found) e[ne++] = a[i];
    }
    sort_distinct(e, &ne);
    output(e, &ne);
    
    return 0;
}

