1. matrix里面的data就是triple数组，输入2 2 2，matrix里面就是 ｛2，2，2，[triple1, triple2]｝,在还没有读取输入的时候，里面数据是无效的。
2. matrix作为表示稀疏矩阵的一个数据结构，还是有必要保存矩阵的元信息的（行、列、元素数就是元数据，缺少元数据，就不算一个完整的数据结构。），而data则是需要处理或运算的数据。打个比方，堆栈的数据结构可以表示为
   typedef struct ｛ int data[MAXLEN]; int top; } STACK;
   这里将堆栈数据结构所有需要的信息集中在一个struct中，成为一个完整的结构。top就是元信息，表示栈顶。虽然也可以用一个数组加上一个整形变量来表示堆栈，但程序组织上面会非常混乱，尤其是大些的程序用到很多数据结构，会很难跟踪什么变量用作什么。用struct组合到一起就清晰多了。另外，数据结构除了表示数据，还有在数据上的一组操作。想象一下，对于矩阵，还有一组操作：两个矩阵相加，相减，乘积，转置等等。这些操作一般写成函数。如果不用一个完整的数据结构表示matrix，这个函数就需要传递所有的矩阵信息，包括一组三元组的数组、行数、列数、三元组的个数，每个函数都变复杂了。表示成一个整体，函数参数只有一个了，因为函数里面可以从matrix数据结构中获取所有关于稀疏矩阵的信息。
3. data是指针，malloc分配matrix时，只分配了指针空间（4个或8个字节，这个指针指向何处未知，还未给数组分配空间，因为在读取行、列、非0元素数之前，还不知道需要分配多少空间，因此用指针表示。就像你需要读取一千万个以内的整数，然后排序。但你事先不知道多少个，又不能直接分配最大的空间，只能声明一个指针然后根据读入的个数后，再malloc分配空间），需要根据读取的元素数再分配相应个数的triple数组。
总结：稀疏矩阵就是用来处理非常大的矩阵（比如100万行 100万列），其特点是绝大部分元素值为0（比如矩阵只有10个非0值），这时用二维数组要么无法表示（空间超过允许分配的最大内存），要么非常浪费（用数组可能需要几百M的内存，而稀疏矩阵用几十字节就表示了）。在矩阵的行数、列数、非0元素数均未知的情况下，是无法事前决定matrix中data[]的大小的，因此用指针表示。
